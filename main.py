#!/usr/bin/env python3
"""
Mapping Inequality: County-Level Gender and Racial Earnings Disparities in Illinois
Main script for running the complete economic analysis pipeline.
"""

import os
import sys
from src.data_collection import CensusDataCollector
from src.data_processing import DataProcessor
from src.analysis import WageGapAnalyzer
from src.economic_analysis import EconomicWageGapAnalyzer
from src.visualization import WageGapVisualizer

def main():
    print("=" * 80)
    print("MAPPING INEQUALITY: ILLINOIS WAGE DISPARITIES - ECONOMIC ANALYSIS")
    print("=" * 80)
    
    os.makedirs('data', exist_ok=True)
    os.makedirs('results', exist_ok=True)
    
    try:
        print("\n1. COLLECTING CENSUS DATA...")
        print("-" * 50)
        collector = CensusDataCollector(year=2022, survey='acs1')
        raw_data = collector.download_county_data()
        
        if raw_data.empty:
            print("‚ùå Failed to collect data. Exiting.")
            return False
        
        print(f"‚úÖ Collected data for {len(raw_data)} counties")
        
        print("\n2. PROCESSING DATA...")
        print("-" * 50)
        processor = DataProcessor(raw_data)
        processed_data = processor.process_data()
        
        if processed_data.empty:
            print("‚ùå Failed to process data. Exiting.")
            return False
        
        print(f"‚úÖ Processed data for {len(processed_data)} counties")
        
        print("\n3. RUNNING DESCRIPTIVE STATISTICAL ANALYSIS...")
        print("-" * 50)
        analyzer = WageGapAnalyzer(processed_data)
        results = analyzer.run_full_analysis()
        
        if not results:
            print("‚ùå Failed to complete descriptive analysis. Exiting.")
            return False
        
        print("‚úÖ Completed descriptive statistical analysis")
        
        print("\n4. RUNNING ECONOMIC ANALYSIS...")
        print("-" * 50)
        economic_analyzer = EconomicWageGapAnalyzer(processed_data)
        economic_results = economic_analyzer.run_complete_economic_analysis()
        
        if not economic_results:
            print("‚ùå Failed to complete economic analysis.")
        else:
            print("‚úÖ Completed economic analysis")
        
        print("\n5. CREATING VISUALIZATIONS...")
        print("-" * 50)
        visualizer = WageGapVisualizer(processed_data)
        visualizer.load_geographic_data()
        visualizations = visualizer.create_all_visualizations(results)
        
        if not visualizations:
            print("‚ùå Failed to create visualizations.")
        else:
            print("‚úÖ Created all visualizations")
        
        print("\n6. ECONOMIC ANALYSIS COMPLETE!")
        print("-" * 50)
        print("üìä Summary of Economic Results:")
        
        # Mincer equation results
        if 'mincer_equation' in economic_results:
            mincer = economic_results['mincer_equation']
            print(f"   ‚Ä¢ Mincer equation R¬≤: {mincer['r_squared']:.3f}")
            print(f"   ‚Ä¢ Education elasticity: {mincer['elasticities']['education']:.3f}")
            print(f"   ‚Ä¢ Experience elasticity: {mincer['elasticities']['experience']:.3f}")
            print(f"   ‚Ä¢ Gender discrimination elasticity: {mincer['elasticities']['gender_discrimination']:.3f}")
        
        # IV analysis results
        if 'iv_analysis' in economic_results:
            iv = economic_results['iv_analysis']
            print(f"   ‚Ä¢ IV first stage F-statistic: {iv['first_stage']['f_statistic']:.2f}")
            print(f"   ‚Ä¢ IV education coefficient: {iv['second_stage']['coefficients']['education_hat']:.3f}")
        
        # Natural experiment results
        if 'natural_experiments' in economic_results:
            ne = economic_results['natural_experiments']
            print(f"   ‚Ä¢ Minimum wage treatment effect: {ne['minimum_wage']['treatment_effect']:.3f}")
            print(f"   ‚Ä¢ Manufacturing treatment effect: {ne['manufacturing']['treatment_effect']:.3f}")
        
        # Structural interpretation
        if 'structural_interpretation' in economic_results:
            structural = economic_results['structural_interpretation']
            if 'welfare' in structural:
                print(f"   ‚Ä¢ Estimated deadweight loss: ${structural['welfare']['deadweight_loss']:,.0f}")
        
        # Policy simulations
        if 'policy_simulation' in economic_results:
            policy = economic_results['policy_simulation']
            print(f"   ‚Ä¢ {policy['policy_type'].title()} effect: {policy['effects']['interpretation']}")
        
        print(f"\nüìÅ Files created:")
        print(f"   ‚Ä¢ data/illinois_county_data.csv")
        print(f"   ‚Ä¢ data/illinois_county_processed.csv")
        print(f"   ‚Ä¢ results/regression_table.csv")
        print(f"   ‚Ä¢ results/economic_analysis_results.json")
        print(f"   ‚Ä¢ results/*.png (visualizations)")
        
        print(f"\nüìö Research Framework:")
        print(f"   ‚Ä¢ ECONOMIC_FRAMEWORK.md - Theoretical foundation")
        print(f"   ‚Ä¢ LITERATURE_REVIEW.md - Literature review")
        print(f"   ‚Ä¢ src/economic_analysis.py - Economic analysis methods")
        
        print(f"\nüéØ Next steps:")
        print(f"   ‚Ä¢ Check results/ directory for all outputs")
        print(f"   ‚Ä¢ Review economic_analysis_results.json for detailed results")
        print(f"   ‚Ä¢ Examine ECONOMIC_FRAMEWORK.md for theoretical foundation")
        print(f"   ‚Ä¢ Read LITERATURE_REVIEW.md for academic context")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        print("Please check the error and try again.")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ Economic analysis completed successfully!")
        print("This research now includes:")
        print("  ‚úì Theoretical framework (Mincer equation with discrimination)")
        print("  ‚úì Literature review and research positioning")
        print("  ‚úì Identification strategy (IV, natural experiments)")
        print("  ‚úì Structural interpretation (elasticities, welfare)")
        print("  ‚úì Policy analysis (simulations, counterfactuals)")
    else:
        print("\nüí• Analysis failed. Please check the errors above.")
        sys.exit(1) 